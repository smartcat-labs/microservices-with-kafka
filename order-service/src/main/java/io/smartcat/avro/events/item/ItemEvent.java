/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.smartcat.avro.events.item;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ItemEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6805465093717365668L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ItemEvent\",\"namespace\":\"io.smartcat.avro.events.item\",\"fields\":[{\"name\":\"eventType\",\"type\":{\"type\":\"enum\",\"name\":\"ItemEventType\",\"symbols\":[\"ADD_ITEM\",\"REMOVE_ITEM\"]}},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"itemAvro\",\"type\":{\"type\":\"record\",\"name\":\"ItemAvro\",\"fields\":[{\"name\":\"itemId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"category\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"price\",\"type\":\"double\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private io.smartcat.avro.events.item.ItemEventType eventType;
   private long timestamp;
   private java.lang.String userId;
   private io.smartcat.avro.events.item.ItemAvro itemAvro;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ItemEvent() {}

  /**
   * All-args constructor.
   * @param eventType The new value for eventType
   * @param timestamp The new value for timestamp
   * @param userId The new value for userId
   * @param itemAvro The new value for itemAvro
   */
  public ItemEvent(io.smartcat.avro.events.item.ItemEventType eventType, java.lang.Long timestamp, java.lang.String userId, io.smartcat.avro.events.item.ItemAvro itemAvro) {
    this.eventType = eventType;
    this.timestamp = timestamp;
    this.userId = userId;
    this.itemAvro = itemAvro;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventType;
    case 1: return timestamp;
    case 2: return userId;
    case 3: return itemAvro;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventType = (io.smartcat.avro.events.item.ItemEventType)value$; break;
    case 1: timestamp = (java.lang.Long)value$; break;
    case 2: userId = (java.lang.String)value$; break;
    case 3: itemAvro = (io.smartcat.avro.events.item.ItemAvro)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public io.smartcat.avro.events.item.ItemEventType getEventType() {
    return eventType;
  }

  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(io.smartcat.avro.events.item.ItemEventType value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.String getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'itemAvro' field.
   * @return The value of the 'itemAvro' field.
   */
  public io.smartcat.avro.events.item.ItemAvro getItemAvro() {
    return itemAvro;
  }

  /**
   * Sets the value of the 'itemAvro' field.
   * @param value the value to set.
   */
  public void setItemAvro(io.smartcat.avro.events.item.ItemAvro value) {
    this.itemAvro = value;
  }

  /**
   * Creates a new ItemEvent RecordBuilder.
   * @return A new ItemEvent RecordBuilder
   */
  public static io.smartcat.avro.events.item.ItemEvent.Builder newBuilder() {
    return new io.smartcat.avro.events.item.ItemEvent.Builder();
  }

  /**
   * Creates a new ItemEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ItemEvent RecordBuilder
   */
  public static io.smartcat.avro.events.item.ItemEvent.Builder newBuilder(io.smartcat.avro.events.item.ItemEvent.Builder other) {
    return new io.smartcat.avro.events.item.ItemEvent.Builder(other);
  }

  /**
   * Creates a new ItemEvent RecordBuilder by copying an existing ItemEvent instance.
   * @param other The existing instance to copy.
   * @return A new ItemEvent RecordBuilder
   */
  public static io.smartcat.avro.events.item.ItemEvent.Builder newBuilder(io.smartcat.avro.events.item.ItemEvent other) {
    return new io.smartcat.avro.events.item.ItemEvent.Builder(other);
  }

  /**
   * RecordBuilder for ItemEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ItemEvent>
    implements org.apache.avro.data.RecordBuilder<ItemEvent> {

    private io.smartcat.avro.events.item.ItemEventType eventType;
    private long timestamp;
    private java.lang.String userId;
    private io.smartcat.avro.events.item.ItemAvro itemAvro;
    private io.smartcat.avro.events.item.ItemAvro.Builder itemAvroBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.smartcat.avro.events.item.ItemEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventType)) {
        this.eventType = data().deepCopy(fields()[0].schema(), other.eventType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.itemAvro)) {
        this.itemAvro = data().deepCopy(fields()[3].schema(), other.itemAvro);
        fieldSetFlags()[3] = true;
      }
      if (other.hasItemAvroBuilder()) {
        this.itemAvroBuilder = io.smartcat.avro.events.item.ItemAvro.newBuilder(other.getItemAvroBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing ItemEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(io.smartcat.avro.events.item.ItemEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventType)) {
        this.eventType = data().deepCopy(fields()[0].schema(), other.eventType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.itemAvro)) {
        this.itemAvro = data().deepCopy(fields()[3].schema(), other.itemAvro);
        fieldSetFlags()[3] = true;
      }
      this.itemAvroBuilder = null;
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public io.smartcat.avro.events.item.ItemEventType getEventType() {
      return eventType;
    }

    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public io.smartcat.avro.events.item.ItemEvent.Builder setEventType(io.smartcat.avro.events.item.ItemEventType value) {
      validate(fields()[0], value);
      this.eventType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public io.smartcat.avro.events.item.ItemEvent.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public io.smartcat.avro.events.item.ItemEvent.Builder setTimestamp(long value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public io.smartcat.avro.events.item.ItemEvent.Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public io.smartcat.avro.events.item.ItemEvent.Builder setUserId(java.lang.String value) {
      validate(fields()[2], value);
      this.userId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public io.smartcat.avro.events.item.ItemEvent.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemAvro' field.
      * @return The value.
      */
    public io.smartcat.avro.events.item.ItemAvro getItemAvro() {
      return itemAvro;
    }

    /**
      * Sets the value of the 'itemAvro' field.
      * @param value The value of 'itemAvro'.
      * @return This builder.
      */
    public io.smartcat.avro.events.item.ItemEvent.Builder setItemAvro(io.smartcat.avro.events.item.ItemAvro value) {
      validate(fields()[3], value);
      this.itemAvroBuilder = null;
      this.itemAvro = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'itemAvro' field has been set.
      * @return True if the 'itemAvro' field has been set, false otherwise.
      */
    public boolean hasItemAvro() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'itemAvro' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.smartcat.avro.events.item.ItemAvro.Builder getItemAvroBuilder() {
      if (itemAvroBuilder == null) {
        if (hasItemAvro()) {
          setItemAvroBuilder(io.smartcat.avro.events.item.ItemAvro.newBuilder(itemAvro));
        } else {
          setItemAvroBuilder(io.smartcat.avro.events.item.ItemAvro.newBuilder());
        }
      }
      return itemAvroBuilder;
    }

    /**
     * Sets the Builder instance for the 'itemAvro' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.smartcat.avro.events.item.ItemEvent.Builder setItemAvroBuilder(io.smartcat.avro.events.item.ItemAvro.Builder value) {
      clearItemAvro();
      itemAvroBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'itemAvro' field has an active Builder instance
     * @return True if the 'itemAvro' field has an active Builder instance
     */
    public boolean hasItemAvroBuilder() {
      return itemAvroBuilder != null;
    }

    /**
      * Clears the value of the 'itemAvro' field.
      * @return This builder.
      */
    public io.smartcat.avro.events.item.ItemEvent.Builder clearItemAvro() {
      itemAvro = null;
      itemAvroBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public ItemEvent build() {
      try {
        ItemEvent record = new ItemEvent();
        record.eventType = fieldSetFlags()[0] ? this.eventType : (io.smartcat.avro.events.item.ItemEventType) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.Long) defaultValue(fields()[1]);
        record.userId = fieldSetFlags()[2] ? this.userId : (java.lang.String) defaultValue(fields()[2]);
        if (itemAvroBuilder != null) {
          record.itemAvro = this.itemAvroBuilder.build();
        } else {
          record.itemAvro = fieldSetFlags()[3] ? this.itemAvro : (io.smartcat.avro.events.item.ItemAvro) defaultValue(fields()[3]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
